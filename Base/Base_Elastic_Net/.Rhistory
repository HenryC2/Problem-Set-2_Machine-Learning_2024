Train
str(Train)
SMOTE <- SMOTE(X = Train,
target = Train$Pobre,
K=5)
Dummys <- subset(Train, select = c(Dominio, Depto, Ocup_vivienda, maxEducLevel,
Head_EducLevel, Head_Oficio, Head_Ocupacion))
Dummys <- subset(Train, select = c(Dominio, Depto))
Dummys
str(Train)
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
# 2. Re-balanceo ---------------------------------------------------------------
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre=="Yes")%>% nrow()/ nrow(Train)*100)
# Debido a que la tasa de pobreza es 20,01%, se debe re balancear la muestra
# para mejorar el proceso de estimación. Para ello, se utilizará el método
# "synthetic minority over-sampling technique (SMOTE)" que hacia un muestro hacia
# arriba de la clase minoritaria (pobres) y hacia abajo de la clase mayoritaria (no pobres)
#2.1 Conversion de variables categóricas en dummys
Dummys <- subset(Train, select = c(Dominio, Depto,tipo_vivienda,Pobre,maxEducLevel,Head_EducLeve,
Head_Oficio,Head_Ocupacion,))
str(Train)
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
Dummys
Dummys <- as.data.frame(apply(Dummys,2,function(x){as.numeric(x)}))
Dummys
str(Train)
Dummys <- as.data.frame(apply(Dummys,2,function(x){as.numeric(x)}))
Dummys <- model.matrix(~ . - 1, data = Dummys)
Dummys
Dummys
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
Dummys
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
# 2. Re-balanceo ---------------------------------------------------------------
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre=="Yes")%>% nrow()/ nrow(Train)*100)
# Debido a que la tasa de pobreza es 20,01%, se debe re balancear la muestra
# para mejorar el proceso de estimación. Para ello, se utilizará el método
# "synthetic minority over-sampling technique (SMOTE)" que hacia un muestro hacia
# arriba de la clase minoritaria (pobres) y hacia abajo de la clase mayoritaria (no pobres)
#2.1 Conversion de variables categóricas en dummys
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
Dummys
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$Pobre <- as.factor(Dummys$Pobre)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
# Crear variables dummy
Dummys_dummies <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
# Crear variables dummy
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
# 2. Re-balanceo ---------------------------------------------------------------
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre=="Yes")%>% nrow()/ nrow(Train)*100)
# Debido a que la tasa de pobreza es 20,01%, se debe re balancear la muestra
# para mejorar el proceso de estimación. Para ello, se utilizará el método
# "synthetic minority over-sampling technique (SMOTE)" que hacia un muestro hacia
# arriba de la clase minoritaria (pobres) y hacia abajo de la clase mayoritaria (no pobres)
#2.1 Conversion de variables categóricas en dummys
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$Pobre <- as.factor(Dummys$Pobre)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
# Crear variables dummy
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
# 2. Re-balanceo ---------------------------------------------------------------
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre=="Yes")%>% nrow()/ nrow(Train)*100)
# Debido a que la tasa de pobreza es 20,01%, se debe re balancear la muestra
# para mejorar el proceso de estimación. Para ello, se utilizará el método
# "synthetic minority over-sampling technique (SMOTE)" que hacia un muestro hacia
# arriba de la clase minoritaria (pobres) y hacia abajo de la clase mayoritaria (no pobres)
#2.1 Conversion de variables categóricas en dummys
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$Pobre <- as.factor(Dummys$Pobre)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
# Crear variables dummy
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
Dummys
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
# 2. Re-balanceo ---------------------------------------------------------------
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre=="Yes")%>% nrow()/ nrow(Train)*100)
# Debido a que la tasa de pobreza es 20,01%, se debe re balancear la muestra
# para mejorar el proceso de estimación. Para ello, se utilizará el método
# "synthetic minority over-sampling technique (SMOTE)" que hacia un muestro hacia
# arriba de la clase minoritaria (pobres) y hacia abajo de la clase mayoritaria (no pobres)
# 2.1 Conversion de variables categóricas en dummys para que funcione SMOTE
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$Pobre <- as.factor(Dummys$Pobre)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
Dummys
# Union con la base original
train_hogares <- cbind(subset(Train, select = -c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion)),Dummys)
train_hogares
# Union con la base original
Train <- cbind(subset(Train, select = -c(Dominio,tipo_vivienda,Pobre,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion)),Dummys)
SMOTE <- SMOTE(X = Train,
target = Train$Pobre,
K=5)
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
Train
Train$Pobre = ifelse(Train=="Yes",1,0)
Test$Pobre = ifelse(Test=="Yes",1,0)
Test
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
Train$Pobre = ifelse(Train=="Yes",1,0)
Test$Pobre = ifelse(Test=="Yes",1,0)
Train
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
Train
Test <- import(file = "Test_hogares_final.rds")
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
Train
View(Test)
Train$Pobre = ifelse(Pobre=="Yes",1,0)
Test$Pobre = ifelse(Pobre=="Yes",1,0)
Train <- Train %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0))
Train
Test <- Test %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0))
Test
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre==1)%>% nrow()/ nrow(Train)*100)
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$Pobre <- as.factor(Dummys$Pobre)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
# Union con la base original
Train <- cbind(subset(Train, select = -c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion)),Dummys)
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
Train <- Train %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0))
# 2. Re-balanceo ---------------------------------------------------------------
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre==1)%>% nrow()/ nrow(Train)*100)
# Debido a que la tasa de pobreza es 20,01%, se debe re balancear la muestra
# para mejorar el proceso de estimación. Para ello, se utilizará el método
# "synthetic minority over-sampling technique (SMOTE)" que hacia un muestro hacia
# arriba de la clase minoritaria (pobres) y hacia abajo de la clase mayoritaria (no pobres)
# 2.1 Arreglos de las variales categoricas en base train -----------------------
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
# Union con la base original
Train <- cbind(subset(Train, select = -c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion)),Dummys)
Dummys <- subset(Test, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$Pobre <- as.factor(Dummys$Pobre)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys <- subset(Test, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
# Union con la base original
Test <- cbind(subset(Test, select = -c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion)),Dummys)
Test
predictors <- colnames(Train  %>% dplyr::select(-Pobre))
Predictores <- colnames(Train  %>% dplyr::select(-Pobre))
Predictores
SMOTE <- SMOTE(X = Predictores,
target = Train$Pobre,
K=5)
Predictores
Train$Pobre
Predictores
SMOTE <- SMOTE(X = Predictores,
target = Train$Pobre,
K=5)
Predictores <- colnames(Train  %>% dplyr::select(-Pobre))
Predictores
SMOTE <- SMOTE(X = Predictores,target = Train$Pobre,K=5)
Predictores
str(Train)
Predictores <- Train %>%
select(-Pobre) %>%
as.data.frame()  # Asegúrate de que sea un dataframe
Predictores
sapply(Predictores, class)
#------------------------------------------------------------------------------#
#----------------------------- Pruebas - Elastic Net  -------------------------#
#------------------------------------------------------------------------------#
# 0. Carga de informacion  -----------------------------------------------------
setwd(paste0(wd,"/Base"))
Train <- import(file = "Train_hogares_final.rds")
Test <- import(file = "Test_hogares_final.rds")
# 1. Filtro de variables -------------------------------------------------------
Filtro_Variables =  function(data,...){
data <- data %>%
#modificar variables
select(-id,-Li,-Lp,-Fex_c,-Fex_dpto,-Valor_Cuota,-Ln_Cuota,-Ln_Pago_arrien,-Departamento)
}
Train = Filtro_Variables(Train)
Test = Filtro_Variables(Test)
# 2. Re-balanceo ---------------------------------------------------------------
table(Train$Pobre)
cat("La tasa de pobrza es", Train%>%select(Pobre)%>% filter(Pobre==1)%>% nrow()/ nrow(Train)*100)
# Debido a que la tasa de pobreza es 20,01%, se debe re balancear la muestra
# para mejorar el proceso de estimación. Para ello, se utilizará el método
# "synthetic minority over-sampling technique (SMOTE)" que hacia un muestro hacia
# arriba de la clase minoritaria (pobres) y hacia abajo de la clase mayoritaria (no pobres)
# 2.1 Arreglos de las variales categoricas en base train -----------------------
Dummys <- subset(Train, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
# Union con la base original
Train <- cbind(subset(Train, select = -c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion)),Dummys)
# 2.1 Arreglos de las variales categoricas en base test -----------------------
Dummys <- subset(Test, select = c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion))
# Convertir las variables categóricas a factores
Dummys$Dominio <- as.factor(Dummys$Dominio)
Dummys$tipo_vivienda <- as.factor(Dummys$tipo_vivienda)
Dummys$maxEducLevel <- as.factor(Dummys$maxEducLevel)
Dummys$Head_EducLevel <- as.factor(Dummys$Head_EducLevel)
Dummys$Head_Oficio <- as.factor(Dummys$Head_Oficio)
Dummys$Head_Ocupacion <- as.factor(Dummys$Head_Ocupacion)
Dummys <- model.matrix(~ . - 1, data = Dummys)  # Eliminar el intercepto
# Union con la base original
Test <- cbind(subset(Test, select = -c(Dominio,tipo_vivienda,maxEducLevel,Head_EducLevel,
Head_Oficio,Head_Ocupacion)),Dummys)
# 2.2  Re balanceo con SMOTE  --------------------------------------------------
Predictores <- Train %>%
select(-Pobre) %>%
as.data.frame()  # Asegúrate de que sea un dataframe
SMOTE <- SMOTE(X = Predictores,target = Train$Pobre,K=5)
Train_SMOTE <- SMOTE$data
Train_SMOTE
wd
wd
setwd(paste0(wd,"\\Base\\Base_Elastic_Net"))
export(Train_SMOTE, "Train_SMOTE.rds")
set.seed(12345) # Para reproducibilidad
train_indices <- as.integer(createDataPartition(Train_SMOTE$Pobre, p = 0.85, list = FALSE))
library(caret)
train_indices <- as.integer(createDataPartition(Train_SMOTE$Pobre, p = 0.85, list = FALSE))
install.packages("recipes")
set.seed(12345) # Para reproducibilidad
train_indices <- as.integer(createDataPartition(Train_SMOTE$Pobre, p = 0.85, list = FALSE))
library(caret)
2+2
# export(Train_SMOTE, "Train_SMOTE.rds")
Train_SMOTE = import(file = "Train_SMOTE.rds")
setwd(paste0(wd,"\\Base\\Base_Elastic_Net"))
# export(Train_SMOTE, "Train_SMOTE.rds")
Train_SMOTE = import(file = "Train_SMOTE.rds")
library(caret)
# export(Train_SMOTE, "Train_SMOTE.rds")
Train_SMOTE = import(file = "Train_SMOTE.rds")
#------------------------------------------------------------------------------#
#------------------------ CODIGO BASE - PROBLEM SET 2 -------------------------#
#------------------------------------------------------------------------------#
# El presente codigo permite:
# 1: Cambiar el directorio entre cada uno de los colaboradores del proyecto
# 2: Correr cada uno de los scripts utilizados en la resolucion del Problem set 2.
# 0. Se borra la memoria y se cargan los paquetes ------------------------------
rm(list = ls())   # Borra la memoria
# Se cargan los paquetes de interes
library(pacman)
p_load(rio,       # importacion/exportacion de datos
tidyverse, # datos ordenados (ggplot y Tidyverse)
skimr,     # datos de resumen
visdat,    # visualizacion de datos faltantes
corrplot,  # graficos de correlacion
stargazer, # tablas/salida a TEX.
rvest,     # web-scraping
readr,     # importar CSV
writexl,   # exportar Excel
boot,      # bootstrapping
ggpubr,    # extensiones de ggplot2
WVPlots,   # graficos de variables ponderadas
patchwork, # para combinar graficos
gridExtra, # para combinar graficos
ggplot2,   # graficos
caret,     # para evaluacion de modelos predictivos
data.table,# para manipulacion de datos
glmnet,
smotefamily, #remuestreo SMOTE
dplyr,
dummy,    # crear dummys
Metrics,  # evaluation metrics for ML
MLeval,   # Machine Learning Model Evaluation
pROC,
ROSE,     #remuestreo ROSE
ranger,   #random forest
xgboost)  #xgboosting
# 1. Definicion del directorio -------------------------------------------------
ifelse(grepl("HP", getwd()), # Diego
wd <- "C:\\Users\\HP\\OneDrive - Universidad Nacional de Colombia\\Documentos\\Diego\\PEG\\2024-2\\Machine learning\\Repositorios\\Problem Set 2\\Problem-Set-2_Machine-Learning_2024",
ifelse(grepl("Usuario", getwd()), # Julieth1
wd <- "C:\\Users\\Usuario\\OneDrive - Universidad de los andes\\Escritorio\\Taller 2 Big data",
ifelse(grepl("Usuario", getwd()), # Julieth2
wd <- "C:\\Users\\hncar\\Documents\\GitHub\\Problem-Set-1_Machine-Learning_2024",
ifelse(grepl("C:\\Users\\User", getwd()),  # Henry
wd <- "C:\\Users\\User\\OneDrive - Universidad de los Andes\\Big Data y Machine Learning\\Problem_set_1\\Problem_set_1",
ifelse(grepl("\\Users\\aleja\\", getwd()),
wd <- "Directorio",  # Jorge
ifelse(grepl("Steven Ramirez", getwd()),
wd <- "",
wd <- "otro_directorio"))))))
setwd(paste0(wd,"\\Base\\Base_Elastic_Net"))
# export(Train_SMOTE, "Train_SMOTE.rds")
Train_SMOTE = import(file = "Train_SMOTE.rds")
Train_SMOTE
set.seed(12345) # Para reproducibilidad
train_indices <- as.integer(createDataPartition(Train_SMOTE$Pobre, p = 0.85, list = FALSE))
detach("package:caret", unload = TRUE)
library(caret)
install.packages("recipes")
set.seed(12345) # Para reproducibilidad
train_indices <- as.integer(createDataPartition(Train_SMOTE$Pobre, p = 0.85, list = FALSE))
